library(RCurl)
library(RJSONIO)
library(plyr)
quit*()
quit()
quit()
head(available.packages())
installed.packages()
clear
install.packages("KernSmooth")
library("KernSmooth")
quit()
quit()
library(RCurl)
library(RJSONIO)
library(plyr)
url <- function(address, return.call = "json", sensor = "false") {
root <- "http://maps.google.com/maps/api/geocode/"
u <- paste(root, return.call, "?address=", address, "&sensor=", sensor, sep = "")
return(URLencode(u))
}
geoCode <- function(address,verbose=FALSE) {
if(verbose) cat(address,"\n")
u <- url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
location_type  <- x$results[[1]]$geometry$location_type
formatted_address  <- x$results[[1]]$formatted_address
return(c(lat, lng, location_type, formatted_address))
Sys.sleep(1)
} else {
return(c(NA,NA,NA,NA))
}
}
customerDATA <- read.csv(file='/Users/evandrotanabe/Documents/PWRC/Customer.csv', sep=';', header=T, stringsAsFactors=F, encoding='latin1')
customerDATA
View(customerDATA)
View(geoCode)
View(customerDATA)
customerData
customerDATA
customerDATA
library(RCurl)
quit()
library(swirl)
swirl()
q()
x <- 5
x
x[0]
x[1]
x[2]
m <- 1:10
m
dim(m)
dim(m) <- c(2,5)
m
cbind
x
z <- factor(c("yes", "yes", "no", "no", "yes",))
z <- factor(c("yes", "yes", "no", "no", "yes"),)
z <- factor(c("yes", "yes", "no", "no", "yes"),
levels = c("yes", "no"))
leves(z)
levels(z)
z
table(z)
unclass(z)
library(RCurl)
library(RJSONIO)
library(plyr)
url <- function(address, return.call = "json", sensor = "false") {
root <- "http://maps.google.com/maps/api/geocode/"
u <- paste(root, return.call, "?address=", address, "&sensor=", sensor, sep = "")
return(URLencode(u))
}
geoCode <- function(address,verbose=FALSE) {
if(verbose) cat(address,"\n")
u <- url(address)
doc <- getURL(u)
x <- fromJSON(doc,simplify = FALSE)
if(x$status=="OK") {
lat <- x$results[[1]]$geometry$location$lat
lng <- x$results[[1]]$geometry$location$lng
location_type  <- x$results[[1]]$geometry$location_type
formatted_address  <- x$results[[1]]$formatted_address
return(c(lat, lng, location_type, formatted_address))
Sys.sleep(1)
} else {
return(c(NA,NA,NA,NA))
}
}
address <- geoCode("Av. Duquesa de Goias, 381 - Morumbi - SP")
addree
address
address <- geoCode("Rodovia Dom Pedro I - Vila Brandina, Campinas - SP")
address
address <- geoCode("Rodovia Raposo Tavares, 6068 - Sao Paulo - SP")
address
q()
add2 <- function(x, y){
x + y
}
add2(3,5)
above <- function(x, n){
use <- x > n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n = 10){
use <- x > n
x[use]
}
above(x)
mean <- function(x) {
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[i])
}
means
}
airquality
columnmean <- function(x) {
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[i])
}
means
}
columnmean(airquality)
ncol(airquality)
columnmean <- function(x) {
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[, i])
}
means
}
columnmean(airquality)
means <- numeric(ncol(airquality))
nc <- ncol(airquality)
class(nx)
class(nc)
nc
columnmean(airquality)
columnmean(airquality)
columnmean <- function(x) {
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc){
means[i] <- mean(x[, i])
}
means
}
columnmean(airquality)
nc <- ncol(airquality)
means <- numeric(nc)
for(i in 1:nc) means[i] <- mean(airquality[, i])
for(i in 1:6) means[i] <- mean(airquality[, i])
means
class(means)
for(i in 1:6) means[i] <- mean(airquality[, i])
mean(airquality[,5])
mean(airquality[, 5])
mean(airquality)
mean(airquality[ , 3])
mean(airquality[ , 5])
mean(airquality$Temp)
class(airquality)
airquality
mean(airquality[, 4])
columnmean(airquality)
q()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector()
x
m
x <- rnorm(100, 5.5)
x
makeVector(x)
mean(x)
makeVector()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
list(x)
list()
makeVector()
x <- makeVector()
x$get()
x
myVector <- rnorm(100, 5.2)
x$set(myVector)
x
x$get()
x$getmean()
x$setmean()
x$setmean(5)
x$getmean()
x
x$get()
mean(x$get())
cachemean(x)
x$setmean(NULL)
cachemean(x)
cachemean(x)
myVector <- rnorm(1000000, 5.201)
mean(myVector)
myVector <- rnorm(999999, 5.201)
mean(myVector)
myVector <- rnorm(999999999, 5.201)
mean(myVector)
x$set(mmyVector)
x$set(myVector)
x$getmean()
cachemean(x)
x$getmean()
setwd("~/Documents/Coursera/50.Repos/datasciencecoursera")
q()
